{"version":3,"sources":["Pathfinding/Node/Node.jsx","algorithms/dijkstra.js","Pathfinding/Pathfinding.jsx","App.js","serviceWorker.js","index.js"],"names":["pathfinding","this","props","row","col","isStart","isFinish","isVisited","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassname","id","className","Component","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbours","node","grid","unvisitedNeighbours","neighbours","isVistited","push","length","getUnvisitedNeighbours","neighbour","Math","min","previousNode","START_NODE_ROW","parseInt","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","NUM_ROWS","NUM_COLS","Pathfinding","state","mouseIsPressed","document","title","getInitialGrid","setState","newGrid","toggleWall","nodesInShortestPath","i","setTimeout","initialClassname","getElementById","nodesInOrder","animateShortestPath","startNode","finishNode","visitedNodesInOrder","getAllNodes","closestNode","shift","Infinity","dijkstra","currentNode","unshift","getShortestPath","animateNodes","onClick","visualizeDijkstra","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e2c92e65.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Node.css\";\n\nexport default class pathfinding extends Component {\n  render() {\n    const {\n      row,\n      col,\n      isStart,\n      isFinish,\n      isVisited,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp\n    } = this.props;\n    const extraClassname = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : isVisited\n      ? \"node-visited\"\n      : \" \";\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassname}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp(row, col)}\n      ></div>\n    );\n  }\n}\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  if (!startNode || !finishNode || startNode === finishNode) {\n    return false;\n  }\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    if (closestNode.isWall) continue;\n    closestNode.isVistited = true;\n    visitedNodesInOrder.push(closestNode);\n\n    if (closestNode === finishNode) {\n      return visitedNodesInOrder;\n    }\n    updateUnvisitedNeighbours(closestNode, grid);\n  }\n}\n\nfunction getAllNodes(grid) {\n  const unvisitedNodes = [];\n  for (let row = 0; row < grid.length; row++)\n    for (let col = 0; col < grid[0].length; col++)\n      unvisitedNodes.push(grid[row][col]);\n  return unvisitedNodes;\n}\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbours(node, grid) {\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\n  for (const neighbour of unvisitedNeighbours) {\n    // neighbour.distance = node.distance + 1;\n    neighbour.distance = Math.min(neighbour.distance, node.distance + 1);\n    neighbour.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const { row, col } = node;\n  if (row - 1 >= 0 && !grid[row - 1][col].isVistited)\n    neighbours.push(grid[row - 1][col]);\n\n  if (col - 1 >= 0 && !grid[row][col - 1].isVistited)\n    neighbours.push(grid[row][col - 1]);\n\n  if (row + 1 < grid.length && !grid[row + 1][col].isVistited)\n    neighbours.push(grid[row + 1][col]);\n\n  if (col + 1 < grid[0].length && !grid[row][col + 1].isVistited)\n    neighbours.push(grid[row][col + 1]);\n  return neighbours;\n}\n\nexport function getShortestPath(startNode, finishNode) {\n  const nodesInShortestPath = [];\n  let currentNode = finishNode;\n  while (currentNode != null) {\n    nodesInShortestPath.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPath;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getShortestPath } from \"./../algorithms/dijkstra.js\";\nimport \"./Pathfinding.css\";\n\nconst START_NODE_ROW = parseInt(5);\nconst START_NODE_COL = parseInt(7);\nconst FINISH_NODE_ROW = parseInt(12);\nconst FINISH_NODE_COL = parseInt(18);\n\nconst NUM_ROWS = parseInt(20);\nconst NUM_COLS = parseInt(40);\n\n// const START_NODE_ROW = parseInt(0);\n// const START_NODE_COL = parseInt(1);\n// const FINISH_NODE_ROW = parseInt(0);\n// const FINISH_NODE_COL = parseInt(8);\n\n// const NUM_ROWS = parseInt(2);\n// const NUM_COLS = parseInt(10);\n\nexport default class Pathfinding extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n\tdocument.title = 'Visual Sexy';\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = toggleWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = toggleWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateShortestPath(nodesInShortestPath) {\n    for (let i = 0; i < nodesInShortestPath.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPath[i];\n        const initialClassname = document.getElementById(\n          `node-${node.row}-${node.col}`\n        ).className;\n        document.getElementById(\n          `node-${node.row}-${node.col}`\n        ).className = `${initialClassname} node-shortest-path `;\n      }, 20 * i);\n    }\n  }\n\n  animateNodes(nodesInOrder, nodesInShortestPath) {\n    for (let i = 1; i <= nodesInOrder.length; i++) {\n      if (i === nodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPath);\n        }, 20 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = nodesInOrder[i];\n        const initialClassname = document.getElementById(\n          `node-${node.row}-${node.col}`\n        ).className;\n        document.getElementById(\n          `node-${node.row}-${node.col}`\n        ).className = `${initialClassname} node-visited `;\n      }, 20 * i);\n    }\n  }\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPath = getShortestPath(startNode, finishNode);\n    this.animateNodes(visitedNodesInOrder, nodesInShortestPath);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Dijkstra's Algo\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {\n                    row,\n                    col,\n                    isStart,\n                    isFinish,\n                    isVisited,\n                    isWall\n                  } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      row={row}\n                      col={col}\n                      mouseIsPressed={mouseIsPressed}\n                      isStart={isStart}\n                      isFinish={isFinish}\n                      isVisited={isVisited}\n                      isWall={isWall}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < NUM_ROWS; row++) {\n    const currRow = [];\n    for (let col = 0; col < NUM_COLS; col++) {\n      currRow.push(createNode(row, col));\n    }\n    grid.push(currRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isWall: false,\n    isVisited: false,\n    previousNode: null\n  };\n};\n\nconst toggleWall = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from \"react\";\nimport Pathfinding from \"./Pathfinding/Pathfinding\";\n\nimport \"./App.css\";\n\n\nfunction App() {\n  return <Pathfinding></Pathfinding>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}